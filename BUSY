let config : Config {
    if target_toolchain == `gcc {
        .lib_names += [ "m" "stdc++" ]
        .ldflags += "-shared-libgcc"
        .cflags_cc += "-std=c++11"
        .cflags_c += "-std=c99"
    }else if target_toolchain == `msvc {
    }else {
        error("target toolchain not supported")
    }
}

let common : SourceSet {
    .configs += config;
    .sources += [
        ./object.cpp
        ./driver.cpp
        ./driver.hpp
        ./code.cpp
        ./code.hpp
        ./assembly.cpp
        ./assembly.hpp
        ./asmgenerator.cpp
        ./object.hpp
        ./stringpool.hpp
        ./utilities.hpp
        ./asmgenerator.hpp
        ./asmparser.cpp
        ./asmparser.hpp
        ./asmlexer.cpp
        ./asmlexer.hpp
        ./asmassembler.cpp
        ./asmassembler.hpp
        ./cdchecker.cpp
        ./cdchecker.hpp
        ./format.hpp
        ./debugging.cpp
        ./debugging.hpp
        ./asmprinter.cpp
        ./asmprinter.hpp
        ./asmcheckercontext.hpp
        ./asmchecker.cpp
        ./asmchecker.hpp
        ./strdiagnostics.hpp
        ./diagnostics.hpp
        ./position.hpp
        ./error.hpp
        ./stdcharset.hpp
        ./charset.hpp
        ./layout.hpp
        ./asmgeneratorcontext.hpp
        ./ieee.hpp
        ./indenter.hpp
        ./stdlayout.hpp
        ]
}

#################### AMD #########################

let amd64 : SourceSet {
    .configs += config;
    .sources += [
        ./amd64.cpp
        ./amd64.hpp
        ./amd64assembler.cpp
        ./amd64assembler.hpp
        ./amd64generator.cpp
        ./amd64generator.hpp
        ]
}

let cdamd16 : Executable {
    .configs += config;
    .deps += [ common amd64 ]
    .sources += [
        ./compiler.cpp
        ]
    .defines += [ "AMD16BACKEND" "CODEFRONTEND" "DEBUGGINGINFORMATION" "ASSEMBLYLISTING" ]
}

let amd16asm : Executable {
    .configs += config;
    .deps += [ common amd64 ]
    .sources += [
        ./assembler.cpp
        ]
    .defines += "AMD16ARCHITECTURE"
}

let cdamd32 : Executable {
    .configs += config;
    .deps += [ common amd64 ]
    .sources += [
        ./compiler.cpp
        ]
    .defines += [ "AMD32BACKEND" "CODEFRONTEND" "DEBUGGINGINFORMATION" "ASSEMBLYLISTING" ]
}

let amd32asm : Executable {
    .configs += config;
    .deps += [ common amd64 ]
    .sources += [
        ./assembler.cpp
        ]
    .defines += "AMD32ARCHITECTURE"
}

let cdamd64 : Executable {
    .configs += config;
    .deps += [ common amd64 ]
    .sources += [
        ./compiler.cpp
        ]
    .defines += [ "AMD64BACKEND" "CODEFRONTEND" "DEBUGGINGINFORMATION" "ASSEMBLYLISTING" ]
}

let amd64asm : Executable {
    .configs += config;
    .deps += [ common amd64 ]
    .sources += [
        ./assembler.cpp
        ]
    .defines += "AMD64ARCHITECTURE"
}

################ ARM ###################

let arm : SourceSet {
    .configs += config;
    .sources += [
        ./armgenerator.cpp
        ./armgenerator.hpp
        ./armgeneratorcontext.hpp
        ./arm.cpp
        ./arm.hpp
        ]
}

let arm32 : SourceSet {
    .configs += config;
    .sources += [
        ./arma32assembler.cpp
        ./arma32assembler.hpp
        ./arma32.cpp
        ./arma32.hpp
        ]
}

let arma32 : SourceSet {
    .configs += config;
    .sources += [
        ./arma32generator.cpp
        ./arma32generator.hpp
        ]
}

let cdarma32 : Executable {
    .configs += config;
    .deps += [ common arm arm32 arma32 ]
    .sources += [
        ./compiler.cpp
        ]
    .defines += [ "ARMA32BACKEND" "CODEFRONTEND" "DEBUGGINGINFORMATION" "ASSEMBLYLISTING" ]
}

let arma32asm : Executable {
    .configs += config;
    .deps += [ common arm arm32 arma32 ]
    .sources += [
        ./assembler.cpp
        ]
    .defines += "ARMA32ARCHITECTURE"
}

let arma64 : SourceSet {
    .configs += config;
    .sources += [
        ./arma64generator.cpp
        ./arma64generator.hpp
        ./arma64.cpp
        ./arma64.hpp
        ./arma64assembler.cpp
        ./arma64assembler.hpp
        ]
}

let cdarma64 : Executable {
    .configs += config;
    .deps += [ common arm arm32 arma64 ]
    .sources += [
        ./compiler.cpp
        ]
    .defines += [ "ARMA64BACKEND" "CODEFRONTEND" "DEBUGGINGINFORMATION" "ASSEMBLYLISTING" ]
}

let arma64asm : Executable {
    .configs += config;
    .deps += [ common arm arm32 arma64 ]
    .sources += [
        ./assembler.cpp
        ]
    .defines += "ARMA64ARCHITECTURE"
}

let armt32 : SourceSet {
    .configs += config;
    .sources += [
        ./armt32generator.cpp
        ./armt32generator.hpp
        ./armt32.cpp
        ./armt32.hpp
        ./armt32assembler.cpp
        ./armt32assembler.hpp
        ]
}

let cdarmt32 : Executable {
    .configs += config;
    .deps += [ common arm armt32 arm32 ]
    .sources += [
        ./compiler.cpp
        ]
    .defines += [ "ARMT32BACKEND" "CODEFRONTEND" "DEBUGGINGINFORMATION" "ASSEMBLYLISTING" ]
}

let cdarmt32fpe : Executable {
    .configs += config;
    .deps += [ common arm armt32 arm32 ]
    .sources += [
        ./compiler.cpp
        ]
    .defines += [ "ARMT32FPEBACKEND" "CODEFRONTEND" "DEBUGGINGINFORMATION" "ASSEMBLYLISTING" ]
}

let armt32asm : Executable {
    .configs += config;
    .deps += [ common arm armt32 arm32 ]
    .sources += [
        ./assembler.cpp
        ]
    .defines += "ARMT32ARCHITECTURE"
}

let cdrun : Executable {
    .configs += config;
    .deps += [ common ]
    .sources += [
        ./cdinterpreter.cpp
        ./cdinterpreter.hpp
        ./interpreter.cpp
        ]
    .defines += [ "CODELANGUAGE" "USE_CHIBICC_LAYOUT" ]
}

############# Linker #################################

let lcore : SourceSet {
    .configs += config;
    .sources += [
        ./objlinker.cpp
        ./objlinker.hpp
        ./rangeset.hpp
        ./objmap.cpp
        ./objmap.hpp
    ]
}

let lcommon : SourceSet {
    .configs += config;
    .sources += [
        # the only things we need from common
        ./driver.cpp
        ./driver.hpp
        ./object.cpp
        ./object.hpp
        ./charset.hpp
        ./strdiagnostics.hpp
        ./diagnostics.hpp
        ./position.hpp
        ./error.hpp
        ./format.hpp
        ./utilities.hpp
        ./stdcharset.hpp
    ]
}

let linkbin : Executable {
    .configs += config;
    .deps += [ lcommon lcore ]
    .sources += [
        ./linker.cpp
        ]
    .defines += "BINARYLINKFILEFORMAT"
}

let linkmem : Executable {
    .configs += config;
    .deps += [ lcommon lcore ]
    .sources += [
        ./linker.cpp
        ]
    .defines += "MEMORYLINKFILEFORMAT"
}

############# ECC ####################################
submod ecc

let compiler : Executable {
    .configs += config;
    .deps += [ ecc.sources common amd64 arm arm32 arma32 arma64 armt32 lcore ]
    .sources += [
        ./ecc/backend.cpp
        ./ecc/main.c
        ./ecc/codegen.cpp
        ./cdemitter.cpp
        ./cdemitter.hpp
        ./cdgenerator.cpp
        ./cdgenerator.hpp
        ]
    .defines += "ECC_HAVE_BACKEND"
    .include_dirs += .

    # cannot use name "ecc" because of collision with ecc subdir
}


############# All tools ##############################

let tools ! : Group {
    .deps += [ cdamd32 cdamd64 cdamd16 cdarma32 cdarma64 cdarmt32 cdarmt32fpe cdrun ]
    .deps += [ amd32asm amd16asm amd64asm arma32asm arma64asm armt32asm ]
    .deps += [ linkbin linkmem ]
    .deps += compiler
}
