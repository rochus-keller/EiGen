#ifndef _CD_
#define _CD_

// Generated by Oberon+ IDE (Mono) 0.9.106 on 2024-07-13T01:26:30

#include "OBX.Runtime.h"
#include "Benchmark.h"
#include "Out.h"
#include "Math.h"
#include "som.Vector.a1be3657f7.h"
#include "som.Vector.c235aac6c4.h"
#include "som.Vector.e0832c0c14.h"
#include "som.Vector.326bd6ec32.h"
#include "som.Vector.d8f2cdf460.h"
#include "som.RedBlackTree.80265c2f3b.h"
#include "som.RedBlackTree.14446907c4.h"
#include "som.RedBlackTree.3520dd22aa.h"
#include "som.RedBlackTree.adef759a05.h"

// Declaration of module CD

struct CD$Vector3D$Class$;
struct CD$Vector3D;
struct CD$CollisionDetector$handleNewFrame$ForEachInterface$Class$;
struct CD$CollisionDetector$handleNewFrame$ForEachInterface;
struct CD$CollisionDetector$Class$;
struct CD$CollisionDetector;
struct CD$Simulator$Class$;
struct CD$Simulator;
struct CD$reduceCollisionSet$ForEachInterface$Class$;
struct CD$reduceCollisionSet$ForEachInterface;
struct CD$CD$Class$;
struct CD$CD;
struct CD$Vector2D$Class$;
struct CD$Vector2D;
struct CD$CallSign$Class$;
struct CD$CallSign;
struct CD$Motion$Class$;
struct CD$Motion;
struct CD$Aircraft$Class$;
struct CD$Aircraft;
struct CD$Collision$Class$;
struct CD$Collision;
struct CD$Vector3D {
    struct CD$Vector3D$Class$* class$;
    double x;
    double y;
    double z;
};

extern void CD$Vector3D$init$(struct CD$Vector3D*);
struct CD$CollisionDetector$handleNewFrame$ForEachInterface {
    struct CD$CollisionDetector$handleNewFrame$ForEachInterface$Class$* class$;
    struct som$Vector$a1be3657f7$Vector * toRemove;
    struct som$RedBlackTree$adef759a05$RedBlackTree * seen;
};

extern void CD$CollisionDetector$handleNewFrame$ForEachInterface$init$(struct CD$CollisionDetector$handleNewFrame$ForEachInterface*);
struct CD$CollisionDetector {
    struct CD$CollisionDetector$Class$* class$;
    struct som$RedBlackTree$80265c2f3b$RedBlackTree * state;
};

extern void CD$CollisionDetector$init$(struct CD$CollisionDetector*);
struct CD$Simulator {
    struct CD$Simulator$Class$* class$;
    struct som$Vector$a1be3657f7$Vector * aircraft;
};

extern void CD$Simulator$init$(struct CD$Simulator*);
struct CD$reduceCollisionSet$ForEachInterface {
    struct CD$reduceCollisionSet$ForEachInterface$Class$* class$;
    struct som$Vector$d8f2cdf460$Vector * result;
};

extern void CD$reduceCollisionSet$ForEachInterface$init$(struct CD$reduceCollisionSet$ForEachInterface*);
struct CD$CD {
    struct CD$CD$Class$* class$;
};

extern void CD$CD$init$(struct CD$CD*);
struct CD$Vector2D {
    struct CD$Vector2D$Class$* class$;
    double x;
    double y;
};

extern void CD$Vector2D$init$(struct CD$Vector2D*);
struct CD$CallSign {
    struct CD$CallSign$Class$* class$;
    int32_t value;
};

extern void CD$CallSign$init$(struct CD$CallSign*);
struct CD$Motion {
    struct CD$Motion$Class$* class$;
    struct CD$CallSign callsign;
    struct CD$Vector3D posOne;
    struct CD$Vector3D posTwo;
};

extern void CD$Motion$init$(struct CD$Motion*);
struct CD$Aircraft {
    struct CD$Aircraft$Class$* class$;
    struct CD$CallSign callsign;
    struct CD$Vector3D position;
};

extern void CD$Aircraft$init$(struct CD$Aircraft*);
struct CD$Collision {
    struct CD$Collision$Class$* class$;
    struct CD$CallSign aircraftA;
    struct CD$CallSign aircraftB;
    struct CD$Vector3D position;
};

extern void CD$Collision$init$(struct CD$Collision*);
extern struct CD$Vector2D CD$horizontal;
extern struct CD$Vector2D CD$vertical;
struct CD$CD * CD$create();
struct Benchmark$Result * CD$CD$benchmark(void* this);
uint8_t CD$CD$verifyResult(void* this, struct Benchmark$Result * result);
int32_t CD$benchmark2(int32_t numAircrafts);
uint8_t CD$CD$innerBenchmarkLoop(void* this, int32_t innerIterations);
uint8_t CD$verifyResult2(int32_t actualCollisions, int32_t numAircrafts);
struct CD$Vector2D CD$Vector2D$plus(void* this, struct CD$Vector2D * other);
struct CD$Vector2D CD$Vector2D$minus(void* this, struct CD$Vector2D * other);
int32_t CD$compareVector2D(struct CD$Vector2D * lhs, struct CD$Vector2D * rhs);
int32_t CD$compareNumbers(double a, double b);
struct CD$Vector3D CD$Vector3D$plus(void* this, struct CD$Vector3D * other);
struct CD$Vector3D CD$Vector3D$minus(void* this, struct CD$Vector3D * other);
struct CD$Vector3D CD$Vector3D$times(void* this, double amount);
double CD$Vector3D$dot(void* this, struct CD$Vector3D * other);
double CD$Vector3D$squaredMagnitude(void* this);
double CD$Vector3D$magnitude(void* this);
int32_t CD$compareCallSign(struct CD$CallSign * lhs, struct CD$CallSign * rhs);
struct CD$Simulator * CD$createSimulator(int32_t numAircraft);
struct som$Vector$c235aac6c4$Vector * CD$Simulator$simulate(void* this, double time);
struct CD$Motion * CD$createMotion(struct CD$CallSign * callsign, struct CD$Vector3D * posOne, struct CD$Vector3D * posTwo);
struct CD$Vector3D CD$Motion$delta(void* this);
uint8_t CD$Motion$findIntersection(void* this, struct CD$Motion * other, struct CD$Vector3D * result);
struct CD$CollisionDetector * CD$createCD();
struct som$Vector$326bd6ec32$Vector * CD$CollisionDetector$handleNewFrame(void* this, struct som$Vector$c235aac6c4$Vector * frame);
void CD$CollisionDetector$handleNewFrame$ForEachInterface$apply(void* this, struct som$RedBlackTree$80265c2f3b$Entry * elem);
uint8_t CD$isInVoxel(struct CD$Vector2D * voxel, struct CD$Motion * motion);
void CD$putIntoMap(struct som$RedBlackTree$14446907c4$RedBlackTree * voxelMap, struct CD$Vector2D * voxel, struct CD$Motion * motion);
struct som$Vector$d8f2cdf460$Vector * CD$reduceCollisionSet(struct som$Vector$e0832c0c14$Vector * motions);
void CD$reduceCollisionSet$ForEachInterface$apply(void* this, struct som$RedBlackTree$14446907c4$Entry * elem);
void CD$recurse(struct som$RedBlackTree$14446907c4$RedBlackTree * voxelMap, struct som$RedBlackTree$3520dd22aa$RedBlackTree * seen, struct CD$Vector2D * nextVoxel, struct CD$Motion * motion);
struct CD$Vector2D CD$voxelHash(struct CD$Vector3D * position);
void CD$drawMotionOnVoxelMap(struct som$RedBlackTree$14446907c4$RedBlackTree * voxelMap, struct CD$Motion * motion);
struct CD$Vector3D$Class$ {
    struct CD$Vector3D$Class$* super$;
    struct CD$Vector3D (*plus)(void* this, struct CD$Vector3D * other);
    struct CD$Vector3D (*minus)(void* this, struct CD$Vector3D * other);
    struct CD$Vector3D (*times)(void* this, double amount);
    double (*dot)(void* this, struct CD$Vector3D * other);
    double (*squaredMagnitude)(void* this);
    double (*magnitude)(void* this);
};
extern struct CD$Vector3D$Class$ CD$Vector3D$class$;

struct CD$CollisionDetector$handleNewFrame$ForEachInterface$Class$ {
    struct som$Interfaces$b3330a6a65$ForEachInterface$Class$* super$;
    void (*apply)(void* this, struct som$RedBlackTree$80265c2f3b$Entry * elem);
};
extern struct CD$CollisionDetector$handleNewFrame$ForEachInterface$Class$ CD$CollisionDetector$handleNewFrame$ForEachInterface$class$;

struct CD$CollisionDetector$Class$ {
    struct CD$CollisionDetector$Class$* super$;
    struct som$Vector$326bd6ec32$Vector * (*handleNewFrame)(void* this, struct som$Vector$c235aac6c4$Vector * frame);
};
extern struct CD$CollisionDetector$Class$ CD$CollisionDetector$class$;

struct CD$Simulator$Class$ {
    struct CD$Simulator$Class$* super$;
    struct som$Vector$c235aac6c4$Vector * (*simulate)(void* this, double time);
};
extern struct CD$Simulator$Class$ CD$Simulator$class$;

struct CD$reduceCollisionSet$ForEachInterface$Class$ {
    struct som$Interfaces$d1517c3aa3$ForEachInterface$Class$* super$;
    void (*apply)(void* this, struct som$RedBlackTree$14446907c4$Entry * elem);
};
extern struct CD$reduceCollisionSet$ForEachInterface$Class$ CD$reduceCollisionSet$ForEachInterface$class$;

struct CD$CD$Class$ {
    struct Benchmark$Benchmark$Class$* super$;
    struct Benchmark$Result * (*benchmark)(void* this);
    uint8_t (*verifyResult)(void* this, struct Benchmark$Result * result);
    uint8_t (*innerBenchmarkLoop)(void* this, int32_t innerIterations);
};
extern struct CD$CD$Class$ CD$CD$class$;

struct CD$Vector2D$Class$ {
    struct CD$Vector2D$Class$* super$;
    struct CD$Vector2D (*plus)(void* this, struct CD$Vector2D * other);
    struct CD$Vector2D (*minus)(void* this, struct CD$Vector2D * other);
};
extern struct CD$Vector2D$Class$ CD$Vector2D$class$;

struct CD$CallSign$Class$ {
    struct CD$CallSign$Class$* super$;
};
extern struct CD$CallSign$Class$ CD$CallSign$class$;

struct CD$Motion$Class$ {
    struct CD$Motion$Class$* super$;
    struct CD$Vector3D (*delta)(void* this);
    uint8_t (*findIntersection)(void* this, struct CD$Motion * other, struct CD$Vector3D * result);
};
extern struct CD$Motion$Class$ CD$Motion$class$;

struct CD$Aircraft$Class$ {
    struct CD$Aircraft$Class$* super$;
};
extern struct CD$Aircraft$Class$ CD$Aircraft$class$;

struct CD$Collision$Class$ {
    struct CD$Collision$Class$* super$;
};
extern struct CD$Collision$Class$ CD$Collision$class$;

extern void CD$init$(void);
extern OBX$Cmd CD$cmd$(const char* name);
#endif
