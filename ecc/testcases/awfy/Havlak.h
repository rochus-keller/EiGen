#ifndef _HAVLAK_
#define _HAVLAK_

// Generated by Oberon+ IDE (Mono) 0.9.106 on 2024-07-13T01:26:30

#include "OBX.Runtime.h"
#include "Benchmark.h"
#include "Out.h"
#include "som.Vector.6226d61315.h"
#include "som.Vector.6184042aef.h"
#include "som.IdentitySet.6226d61315.h"
#include "som.IdentitySet.2b688abfab.h"
#include "som.Vector.d944f549ff.h"
#include "som.Vector.2b688abfab.h"
#include "som.Set.04445da84e.h"
#include "som.Vector.aa9eee315e.h"
#include "som.Vector.04445da84e.h"
#include "som.Vector.bccc871b36.h"
#include "som.IdentityDictionary.84b2aa0859.h"

// Declaration of module Havlak

struct Havlak$HavlakLoopFinder$findLoops$FI1$Class$;
struct Havlak$HavlakLoopFinder$findLoops$FI1;
struct Havlak$Havlak$Class$;
struct Havlak$Havlak;
struct Havlak$LoopStructureGraph$Class$;
struct Havlak$LoopStructureGraph;
struct Havlak$HavlakLoopFinder$Class$;
struct Havlak$HavlakLoopFinder;
struct Havlak$LoopStructureGraph$calculateNestingLevelRec$FI$Class$;
struct Havlak$LoopStructureGraph$calculateNestingLevelRec$FI;
struct Havlak$UnionFindNode$findSet$FI$Class$;
struct Havlak$UnionFindNode$findSet$FI;
struct Havlak$LoopStructureGraph$calculateNestingLevel$FI$Class$;
struct Havlak$LoopStructureGraph$calculateNestingLevel$FI;
struct Havlak$IntIntResult$Class$;
struct Havlak$IntIntResult;
struct Havlak$BasicBlock$Class$;
struct Havlak$BasicBlock;
struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply$TI$Class$;
struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply$TI;
struct Havlak$SimpleLoop$Class$;
struct Havlak$SimpleLoop;
struct Havlak$HavlakLoopFinder$setLoopAttributes$FI$Class$;
struct Havlak$HavlakLoopFinder$setLoopAttributes$FI;
struct Havlak$HavlakLoopFinder$processEdges$FI$Class$;
struct Havlak$HavlakLoopFinder$processEdges$FI;
struct Havlak$HavlakLoopFinder$initAllNodes$FI$Class$;
struct Havlak$HavlakLoopFinder$initAllNodes$FI;
struct Havlak$BasicBlockEdge$Class$;
struct Havlak$BasicBlockEdge;
struct Havlak$UnionFindNode$Class$;
struct Havlak$UnionFindNode;
struct Havlak$HavlakLoopFinder$stepD$FI$Class$;
struct Havlak$HavlakLoopFinder$stepD$FI;
struct Havlak$ControlFlowGraph$Class$;
struct Havlak$ControlFlowGraph;
struct Havlak$LoopTesterApp$Class$;
struct Havlak$LoopTesterApp;
struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$Class$;
struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI;
struct Havlak$HavlakLoopFinder$findLoops$FI1 {
    struct Havlak$HavlakLoopFinder$findLoops$FI1$Class$* class$;
    struct som$Vector$d944f549ff$Vector * workList;
};

extern void Havlak$HavlakLoopFinder$findLoops$FI1$init$(struct Havlak$HavlakLoopFinder$findLoops$FI1*);
struct Havlak$Havlak {
    struct Havlak$Havlak$Class$* class$;
};

extern void Havlak$Havlak$init$(struct Havlak$Havlak*);
struct Havlak$LoopStructureGraph {
    struct Havlak$LoopStructureGraph$Class$* class$;
    struct Havlak$SimpleLoop * root;
    struct som$Vector$2b688abfab$Vector * loops;
    int32_t loopCounter;
};

extern void Havlak$LoopStructureGraph$init$(struct Havlak$LoopStructureGraph*);
struct Havlak$HavlakLoopFinder {
    struct Havlak$HavlakLoopFinder$Class$* class$;
    struct Havlak$ControlFlowGraph * cfg;
    struct Havlak$LoopStructureGraph * lsg;
    struct som$Vector$aa9eee315e$Vector * nonBackPreds;
    struct som$Vector$bccc871b36$Vector * backPreds;
    struct som$Dictionary$84b2aa0859$Dictionary * number;
    int32_t maxSize;
    struct OBX$Array$1 header;
    struct OBX$Array$1 last;
    struct OBX$Array$1 type_;
    struct OBX$Array$1 nodes;
};

extern void Havlak$HavlakLoopFinder$init$(struct Havlak$HavlakLoopFinder*);
struct Havlak$LoopStructureGraph$calculateNestingLevelRec$FI {
    struct Havlak$LoopStructureGraph$calculateNestingLevelRec$FI$Class$* class$;
    struct Havlak$LoopStructureGraph * this;
    struct Havlak$SimpleLoop * looop;
    int32_t depth;
};

extern void Havlak$LoopStructureGraph$calculateNestingLevelRec$FI$init$(struct Havlak$LoopStructureGraph$calculateNestingLevelRec$FI*);
struct Havlak$UnionFindNode$findSet$FI {
    struct Havlak$UnionFindNode$findSet$FI$Class$* class$;
    struct Havlak$UnionFindNode * parent;
};

extern void Havlak$UnionFindNode$findSet$FI$init$(struct Havlak$UnionFindNode$findSet$FI*);
struct Havlak$LoopStructureGraph$calculateNestingLevel$FI {
    struct Havlak$LoopStructureGraph$calculateNestingLevel$FI$Class$* class$;
    struct Havlak$SimpleLoop * root;
};

extern void Havlak$LoopStructureGraph$calculateNestingLevel$FI$init$(struct Havlak$LoopStructureGraph$calculateNestingLevel$FI*);
struct Havlak$IntIntResult {
    struct Havlak$IntIntResult$Class$* class$;
    int32_t res1;
    int32_t res2;
};

extern void Havlak$IntIntResult$init$(struct Havlak$IntIntResult*);
struct Havlak$BasicBlock {
    struct Havlak$BasicBlock$Class$* class$;
    struct som$Vector$6226d61315$Vector * inEdges;
    struct som$Vector$6226d61315$Vector * outEdges;
    int32_t name;
};

extern void Havlak$BasicBlock$init$(struct Havlak$BasicBlock*);
struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply$TI {
    struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply$TI$Class$* class$;
    struct Havlak$UnionFindNode * ydash;
};

extern void Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply$TI$init$(struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply$TI*);
struct Havlak$SimpleLoop {
    struct Havlak$SimpleLoop$Class$* class$;
    struct som$Set$6226d61315$Set * basicBlocks;
    struct som$Set$2b688abfab$Set * children;
    struct Havlak$SimpleLoop * parent;
    uint8_t isRoot;
    int32_t nestingLevel;
};

extern void Havlak$SimpleLoop$init$(struct Havlak$SimpleLoop*);
struct Havlak$HavlakLoopFinder$setLoopAttributes$FI {
    struct Havlak$HavlakLoopFinder$setLoopAttributes$FI$Class$* class$;
    struct Havlak$HavlakLoopFinder * this;
    int32_t w;
    struct Havlak$SimpleLoop * looop;
};

extern void Havlak$HavlakLoopFinder$setLoopAttributes$FI$init$(struct Havlak$HavlakLoopFinder$setLoopAttributes$FI*);
struct Havlak$HavlakLoopFinder$processEdges$FI {
    struct Havlak$HavlakLoopFinder$processEdges$FI$Class$* class$;
    struct Havlak$HavlakLoopFinder * this;
    int32_t w;
};

extern void Havlak$HavlakLoopFinder$processEdges$FI$init$(struct Havlak$HavlakLoopFinder$processEdges$FI*);
struct Havlak$HavlakLoopFinder$initAllNodes$FI {
    struct Havlak$HavlakLoopFinder$initAllNodes$FI$Class$* class$;
    struct som$Dictionary$84b2aa0859$Dictionary * number;
};

extern void Havlak$HavlakLoopFinder$initAllNodes$FI$init$(struct Havlak$HavlakLoopFinder$initAllNodes$FI*);
struct Havlak$BasicBlockEdge {
    struct Havlak$BasicBlockEdge$Class$* class$;
    struct Havlak$BasicBlock * from;
    struct Havlak$BasicBlock * too;
};

extern void Havlak$BasicBlockEdge$init$(struct Havlak$BasicBlockEdge*);
struct Havlak$UnionFindNode {
    struct Havlak$UnionFindNode$Class$* class$;
    struct Havlak$UnionFindNode * parent;
    struct Havlak$BasicBlock * bb;
    struct Havlak$SimpleLoop * looop;
    int32_t dfsNumber;
};

extern void Havlak$UnionFindNode$init$(struct Havlak$UnionFindNode*);
struct Havlak$HavlakLoopFinder$stepD$FI {
    struct Havlak$HavlakLoopFinder$stepD$FI$Class$* class$;
    struct Havlak$HavlakLoopFinder * this;
    int32_t w;
    struct som$Vector$d944f549ff$Vector * nodePool;
};

extern void Havlak$HavlakLoopFinder$stepD$FI$init$(struct Havlak$HavlakLoopFinder$stepD$FI*);
struct Havlak$ControlFlowGraph {
    struct Havlak$ControlFlowGraph$Class$* class$;
    struct som$Vector$6226d61315$Vector * basicBlockMap;
    struct Havlak$BasicBlock * startNode;
    struct som$Vector$6184042aef$Vector * edgeList;
};

extern void Havlak$ControlFlowGraph$init$(struct Havlak$ControlFlowGraph*);
struct Havlak$LoopTesterApp {
    struct Havlak$LoopTesterApp$Class$* class$;
    struct Havlak$ControlFlowGraph * cfg;
    struct Havlak$LoopStructureGraph * lsg;
};

extern void Havlak$LoopTesterApp$init$(struct Havlak$LoopTesterApp*);
struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI {
    struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$Class$* class$;
    struct Havlak$HavlakLoopFinder * this;
    struct som$Vector$d944f549ff$Vector * nodePool;
    struct som$Vector$d944f549ff$Vector * workList;
    int32_t w;
};

extern void Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$init$(struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI*);
struct Havlak$Havlak * Havlak$create();
struct Benchmark$Result * Havlak$Havlak$benchmark(void* this);
uint8_t Havlak$Havlak$verifyResult(void* this, struct Benchmark$Result * result);
uint8_t Havlak$Havlak$innerBenchmarkLoop(void* this, int32_t innerIterations);
uint8_t Havlak$verifyResult2(struct Havlak$IntIntResult * r, int32_t innerIterations);
struct Havlak$BasicBlock * Havlak$createBasicBlock(int32_t name);
int32_t Havlak$BasicBlockHash(struct Havlak$BasicBlock * * b);
struct Havlak$BasicBlockEdge * Havlak$createEdge(struct Havlak$ControlFlowGraph * cfg, int32_t fromName, int32_t toName);
struct Havlak$ControlFlowGraph * Havlak$createCFG();
struct Havlak$BasicBlock * Havlak$ControlFlowGraph$createNode(void* this, int32_t name);
int32_t Havlak$ControlFlowGraph$getNumNodes(void* this);
struct Havlak$SimpleLoop * Havlak$createSimpleLoop(struct Havlak$BasicBlock * bb);
void Havlak$SimpleLoop$setParent(void* this, struct Havlak$SimpleLoop * parent);
void Havlak$SimpleLoop$setNestingLevel(void* this, int32_t level);
void Havlak$UnionFindNode$initNode(void* this, struct Havlak$BasicBlock * bb, int32_t dfsNumber);
void Havlak$UnionFindNode$union(void* this, struct Havlak$UnionFindNode * basicBlock);
struct Havlak$UnionFindNode * Havlak$UnionFindNode$findSet(void* this);
void Havlak$UnionFindNode$findSet$FI$apply(void* this, struct Havlak$UnionFindNode * * elem);
struct Havlak$LoopStructureGraph * Havlak$createLoopStructureGraph();
struct Havlak$SimpleLoop * Havlak$LoopStructureGraph$createNewLoop(void* this, struct Havlak$BasicBlock * bb);
void Havlak$LoopStructureGraph$calculateNestingLevel(void* this);
void Havlak$LoopStructureGraph$calculateNestingLevel$FI$apply(void* this, struct Havlak$SimpleLoop * * elem);
void Havlak$LoopStructureGraph$calculateNestingLevelRec(void* this, struct Havlak$SimpleLoop * looop, int32_t depth);
void Havlak$LoopStructureGraph$calculateNestingLevelRec$FI$apply(void* this, struct Havlak$SimpleLoop * * elem);
struct Havlak$LoopTesterApp * Havlak$createLoopTesterApp();
int32_t Havlak$LoopTesterApp$buildDiamond(void* this, int32_t start);
void Havlak$LoopTesterApp$buildConnect(void* this, int32_t start, int32_t _end);
int32_t Havlak$LoopTesterApp$buildStraight(void* this, int32_t start, int32_t n);
int32_t Havlak$LoopTesterApp$buildBaseLoop(void* this, int32_t from);
void Havlak$LoopTesterApp$constructCFG(void* this, int32_t parLoops, int32_t pparLoops, int32_t ppparLoops);
void Havlak$LoopTesterApp$addDummyLoops(void* this, int32_t numDummyLoops);
void Havlak$LoopTesterApp$findLoops(void* this, struct Havlak$LoopStructureGraph * loopStructure);
void Havlak$LoopTesterApp$constructSimpleCFG(void* this);
struct Havlak$IntIntResult * Havlak$LoopTesterApp$main(void* this, int32_t numDummyLoops, int32_t findLoopIterations, int32_t parLoops, int32_t pparLoops, int32_t ppparLoops);
struct Havlak$HavlakLoopFinder * Havlak$createHavlakLoopFinder(struct Havlak$ControlFlowGraph * cfg, struct Havlak$LoopStructureGraph * lsg);
int32_t Havlak$hashBasicBlock(struct Havlak$BasicBlock * * k);
uint8_t Havlak$HavlakLoopFinder$isAncestor(void* this, int32_t w, int32_t v);
int32_t Havlak$HavlakLoopFinder$doDFS(void* this, struct Havlak$BasicBlock * currentNode, int32_t current);
void Havlak$HavlakLoopFinder$initAllNodes(void* this);
void Havlak$HavlakLoopFinder$initAllNodes$FI$apply(void* this, struct Havlak$BasicBlock * * elem);
void Havlak$HavlakLoopFinder$identifyEdges(void* this, int32_t size);
void Havlak$HavlakLoopFinder$processEdges(void* this, struct Havlak$BasicBlock * nodeW, int32_t w);
void Havlak$HavlakLoopFinder$processEdges$FI$apply(void* this, struct Havlak$BasicBlock * * nodeV);
void Havlak$HavlakLoopFinder$findLoops(void* this);
void Havlak$HavlakLoopFinder$findLoops$FI1$apply(void* this, struct Havlak$UnionFindNode * * elem);
void Havlak$HavlakLoopFinder$stepEProcessNonBackPreds(void* this, int32_t w, struct som$Vector$d944f549ff$Vector * nodePool, struct som$Vector$d944f549ff$Vector * workList, struct Havlak$UnionFindNode * x);
void Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply(void* this, int32_t * elem);
uint8_t Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply$TI$test(void* this, struct Havlak$UnionFindNode * * elem);
void Havlak$HavlakLoopFinder$setLoopAttributes(void* this, int32_t w, struct som$Vector$d944f549ff$Vector * nodePool, struct Havlak$SimpleLoop * looop);
void Havlak$HavlakLoopFinder$setLoopAttributes$FI$apply(void* this, struct Havlak$UnionFindNode * * node);
void Havlak$HavlakLoopFinder$stepD(void* this, int32_t w, struct som$Vector$d944f549ff$Vector * nodePool);
void Havlak$HavlakLoopFinder$stepD$FI$apply(void* this, int32_t * v);
struct Havlak$HavlakLoopFinder$findLoops$FI1$Class$ {
    struct som$Interfaces$d944f549ff$ForEachInterface$Class$* super$;
    void (*apply)(void* this, struct Havlak$UnionFindNode * * elem);
};
extern struct Havlak$HavlakLoopFinder$findLoops$FI1$Class$ Havlak$HavlakLoopFinder$findLoops$FI1$class$;

struct Havlak$Havlak$Class$ {
    struct Benchmark$Benchmark$Class$* super$;
    struct Benchmark$Result * (*benchmark)(void* this);
    uint8_t (*verifyResult)(void* this, struct Benchmark$Result * result);
    uint8_t (*innerBenchmarkLoop)(void* this, int32_t innerIterations);
};
extern struct Havlak$Havlak$Class$ Havlak$Havlak$class$;

struct Havlak$LoopStructureGraph$Class$ {
    struct Havlak$LoopStructureGraph$Class$* super$;
    struct Havlak$SimpleLoop * (*createNewLoop)(void* this, struct Havlak$BasicBlock * bb);
    void (*calculateNestingLevel)(void* this);
    void (*calculateNestingLevelRec)(void* this, struct Havlak$SimpleLoop * looop, int32_t depth);
};
extern struct Havlak$LoopStructureGraph$Class$ Havlak$LoopStructureGraph$class$;

struct Havlak$HavlakLoopFinder$Class$ {
    struct Havlak$HavlakLoopFinder$Class$* super$;
    uint8_t (*isAncestor)(void* this, int32_t w, int32_t v);
    int32_t (*doDFS)(void* this, struct Havlak$BasicBlock * currentNode, int32_t current);
    void (*initAllNodes)(void* this);
    void (*identifyEdges)(void* this, int32_t size);
    void (*processEdges)(void* this, struct Havlak$BasicBlock * nodeW, int32_t w);
    void (*findLoops)(void* this);
    void (*stepEProcessNonBackPreds)(void* this, int32_t w, struct som$Vector$d944f549ff$Vector * nodePool, struct som$Vector$d944f549ff$Vector * workList, struct Havlak$UnionFindNode * x);
    void (*setLoopAttributes)(void* this, int32_t w, struct som$Vector$d944f549ff$Vector * nodePool, struct Havlak$SimpleLoop * looop);
    void (*stepD)(void* this, int32_t w, struct som$Vector$d944f549ff$Vector * nodePool);
};
extern struct Havlak$HavlakLoopFinder$Class$ Havlak$HavlakLoopFinder$class$;

struct Havlak$LoopStructureGraph$calculateNestingLevelRec$FI$Class$ {
    struct som$Interfaces$2b688abfab$ForEachInterface$Class$* super$;
    void (*apply)(void* this, struct Havlak$SimpleLoop * * elem);
};
extern struct Havlak$LoopStructureGraph$calculateNestingLevelRec$FI$Class$ Havlak$LoopStructureGraph$calculateNestingLevelRec$FI$class$;

struct Havlak$UnionFindNode$findSet$FI$Class$ {
    struct som$Interfaces$d944f549ff$ForEachInterface$Class$* super$;
    void (*apply)(void* this, struct Havlak$UnionFindNode * * elem);
};
extern struct Havlak$UnionFindNode$findSet$FI$Class$ Havlak$UnionFindNode$findSet$FI$class$;

struct Havlak$LoopStructureGraph$calculateNestingLevel$FI$Class$ {
    struct som$Interfaces$2b688abfab$ForEachInterface$Class$* super$;
    void (*apply)(void* this, struct Havlak$SimpleLoop * * elem);
};
extern struct Havlak$LoopStructureGraph$calculateNestingLevel$FI$Class$ Havlak$LoopStructureGraph$calculateNestingLevel$FI$class$;

struct Havlak$IntIntResult$Class$ {
    struct Benchmark$Result$Class$* super$;
};
extern struct Havlak$IntIntResult$Class$ Havlak$IntIntResult$class$;

struct Havlak$BasicBlock$Class$ {
    struct Havlak$BasicBlock$Class$* super$;
};
extern struct Havlak$BasicBlock$Class$ Havlak$BasicBlock$class$;

struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply$TI$Class$ {
    struct som$Interfaces$d944f549ff$TestInterface$Class$* super$;
    uint8_t (*test)(void* this, struct Havlak$UnionFindNode * * elem);
};
extern struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply$TI$Class$ Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$apply$TI$class$;

struct Havlak$SimpleLoop$Class$ {
    struct Havlak$SimpleLoop$Class$* super$;
    void (*setParent)(void* this, struct Havlak$SimpleLoop * parent);
    void (*setNestingLevel)(void* this, int32_t level);
};
extern struct Havlak$SimpleLoop$Class$ Havlak$SimpleLoop$class$;

struct Havlak$HavlakLoopFinder$setLoopAttributes$FI$Class$ {
    struct som$Interfaces$d944f549ff$ForEachInterface$Class$* super$;
    void (*apply)(void* this, struct Havlak$UnionFindNode * * node);
};
extern struct Havlak$HavlakLoopFinder$setLoopAttributes$FI$Class$ Havlak$HavlakLoopFinder$setLoopAttributes$FI$class$;

struct Havlak$HavlakLoopFinder$processEdges$FI$Class$ {
    struct som$Interfaces$6226d61315$ForEachInterface$Class$* super$;
    void (*apply)(void* this, struct Havlak$BasicBlock * * nodeV);
};
extern struct Havlak$HavlakLoopFinder$processEdges$FI$Class$ Havlak$HavlakLoopFinder$processEdges$FI$class$;

struct Havlak$HavlakLoopFinder$initAllNodes$FI$Class$ {
    struct som$Interfaces$6226d61315$ForEachInterface$Class$* super$;
    void (*apply)(void* this, struct Havlak$BasicBlock * * elem);
};
extern struct Havlak$HavlakLoopFinder$initAllNodes$FI$Class$ Havlak$HavlakLoopFinder$initAllNodes$FI$class$;

struct Havlak$BasicBlockEdge$Class$ {
    struct Havlak$BasicBlockEdge$Class$* super$;
};
extern struct Havlak$BasicBlockEdge$Class$ Havlak$BasicBlockEdge$class$;

struct Havlak$UnionFindNode$Class$ {
    struct Havlak$UnionFindNode$Class$* super$;
    void (*initNode)(void* this, struct Havlak$BasicBlock * bb, int32_t dfsNumber);
    void (*union_)(void* this, struct Havlak$UnionFindNode * basicBlock);
    struct Havlak$UnionFindNode * (*findSet)(void* this);
};
extern struct Havlak$UnionFindNode$Class$ Havlak$UnionFindNode$class$;

struct Havlak$HavlakLoopFinder$stepD$FI$Class$ {
    struct som$Interfaces$04445da84e$ForEachInterface$Class$* super$;
    void (*apply)(void* this, int32_t * v);
};
extern struct Havlak$HavlakLoopFinder$stepD$FI$Class$ Havlak$HavlakLoopFinder$stepD$FI$class$;

struct Havlak$ControlFlowGraph$Class$ {
    struct Havlak$ControlFlowGraph$Class$* super$;
    struct Havlak$BasicBlock * (*createNode)(void* this, int32_t name);
    int32_t (*getNumNodes)(void* this);
};
extern struct Havlak$ControlFlowGraph$Class$ Havlak$ControlFlowGraph$class$;

struct Havlak$LoopTesterApp$Class$ {
    struct Havlak$LoopTesterApp$Class$* super$;
    int32_t (*buildDiamond)(void* this, int32_t start);
    void (*buildConnect)(void* this, int32_t start, int32_t _end);
    int32_t (*buildStraight)(void* this, int32_t start, int32_t n);
    int32_t (*buildBaseLoop)(void* this, int32_t from);
    void (*constructCFG)(void* this, int32_t parLoops, int32_t pparLoops, int32_t ppparLoops);
    void (*addDummyLoops)(void* this, int32_t numDummyLoops);
    void (*findLoops)(void* this, struct Havlak$LoopStructureGraph * loopStructure);
    void (*constructSimpleCFG)(void* this);
    struct Havlak$IntIntResult * (*main_)(void* this, int32_t numDummyLoops, int32_t findLoopIterations, int32_t parLoops, int32_t pparLoops, int32_t ppparLoops);
};
extern struct Havlak$LoopTesterApp$Class$ Havlak$LoopTesterApp$class$;

struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$Class$ {
    struct som$Interfaces$04445da84e$ForEachInterface$Class$* super$;
    void (*apply)(void* this, int32_t * elem);
};
extern struct Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$Class$ Havlak$HavlakLoopFinder$stepEProcessNonBackPreds$FI$class$;

extern void Havlak$init$(void);
extern OBX$Cmd Havlak$cmd$(const char* name);
#endif
