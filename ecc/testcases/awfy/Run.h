#ifndef _RUN_
#define _RUN_

// Generated by Oberon+ IDE (Mono) 0.9.106 on 2024-07-13T01:26:30

#include "OBX.Runtime.h"
#include "Benchmark.h"
#include "Out.h"
#include "Input.h"
#include "Permute.h"
#include "Bounce.h"
#include "List.h"
#include "Mandelbrot.h"
#include "Queens.h"
#include "Sieve.h"
#include "Storage.h"
#include "Towers.h"
#include "Richards.h"
#include "Json.h"
#include "NBody.h"
#include "CD.h"
#include "CD2.h"
#include "Havlak.h"
#include "DeltaBlue.h"

// Declaration of module Run

struct Run$Run$Class$;
struct Run$Run;
struct Run$Run {
    struct Run$Run$Class$* class$;
    char name[32];
    struct Benchmark$Benchmark * benchmarkSuite;
    int32_t numIterations;
    int32_t innerIterations;
    int32_t total;
};

extern void Run$Run$init$(struct Run$Run*);
struct Run$Run * Run$create(struct OBX$Array$1 name);
struct Benchmark$Benchmark * Run$getSuiteFromName(struct OBX$Array$1 name);
void Run$Run$runBenchmark(void* this);
uint8_t Run$Run$doRuns(void* this, struct Benchmark$Benchmark * bench);
uint8_t Run$Run$measure(void* this, struct Benchmark$Benchmark * bench);
void Run$Run$reportBenchmark(void* this);
void Run$Run$printResult(void* this, int32_t runTime);
void Run$Run$printTotal(void* this);
void Run$Run$setNumIterations(void* this, int32_t numIterations);
void Run$Run$setInnerIterations(void* this, int32_t innerIterations);
struct Run$Run$Class$ {
    struct Run$Run$Class$* super$;
    void (*runBenchmark)(void* this);
    uint8_t (*doRuns)(void* this, struct Benchmark$Benchmark * bench);
    uint8_t (*measure)(void* this, struct Benchmark$Benchmark * bench);
    void (*reportBenchmark)(void* this);
    void (*printResult)(void* this, int32_t runTime);
    void (*printTotal)(void* this);
    void (*setNumIterations)(void* this, int32_t numIterations);
    void (*setInnerIterations)(void* this, int32_t innerIterations);
};
extern struct Run$Run$Class$ Run$Run$class$;

extern void Run$init$(void);
extern OBX$Cmd Run$cmd$(const char* name);
#endif
