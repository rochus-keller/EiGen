#ifndef _SOM$REDBLACKTREE$3520DD22AA_
#define _SOM$REDBLACKTREE$3520DD22AA_

// Generated by Oberon+ IDE (Mono) 0.9.106 on 2024-07-13T01:26:30

#include "OBX.Runtime.h"
#include "som.Interfaces.863d2c4dbf.h"

// Declaration of module som.RedBlackTree(CD.Vector2D,BOOLEAN)

struct CD$Vector2D;
struct CD$Vector2D; // meta actual
struct som$RedBlackTree$3520dd22aa$InsertResult$Class$;
struct som$RedBlackTree$3520dd22aa$InsertResult;
struct som$RedBlackTree$3520dd22aa$Entry$Class$;
struct som$RedBlackTree$3520dd22aa$Entry;
struct som$RedBlackTree$3520dd22aa$Node$Class$;
struct som$RedBlackTree$3520dd22aa$Node;
struct som$RedBlackTree$3520dd22aa$RedBlackTree$Class$;
struct som$RedBlackTree$3520dd22aa$RedBlackTree;
struct som$RedBlackTree$3520dd22aa$InsertResult {
    struct som$RedBlackTree$3520dd22aa$InsertResult$Class$* class$;
    uint8_t isNewEntry;
    struct som$RedBlackTree$3520dd22aa$Node * newNode;
    uint8_t oldValue;
};

extern void som$RedBlackTree$3520dd22aa$InsertResult$init$(struct som$RedBlackTree$3520dd22aa$InsertResult*);
struct som$RedBlackTree$3520dd22aa$Entry {
    struct som$RedBlackTree$3520dd22aa$Entry$Class$* class$;
    struct /*CD$Vector2D*/ { void* class$; double x; double y; } key;
    uint8_t value;
};

extern void som$RedBlackTree$3520dd22aa$Entry$init$(struct som$RedBlackTree$3520dd22aa$Entry*);
struct som$RedBlackTree$3520dd22aa$Node {
    struct som$RedBlackTree$3520dd22aa$Node$Class$* class$;
    struct /*CD$Vector2D*/ { void* class$; double x; double y; } key;
    uint8_t value;
    struct som$RedBlackTree$3520dd22aa$Node * left;
    struct som$RedBlackTree$3520dd22aa$Node * right;
    struct som$RedBlackTree$3520dd22aa$Node * parent;
    int color;
};

extern void som$RedBlackTree$3520dd22aa$Node$init$(struct som$RedBlackTree$3520dd22aa$Node*);
struct som$RedBlackTree$3520dd22aa$RedBlackTree {
    struct som$RedBlackTree$3520dd22aa$RedBlackTree$Class$* class$;
    struct som$RedBlackTree$3520dd22aa$Node * root;
    int32_t (*compare)(struct CD$Vector2D *, struct CD$Vector2D *);
};

extern void som$RedBlackTree$3520dd22aa$RedBlackTree$init$(struct som$RedBlackTree$3520dd22aa$RedBlackTree*);
struct som$RedBlackTree$3520dd22aa$Node * som$RedBlackTree$3520dd22aa$createNode(struct CD$Vector2D * key, uint8_t * value);
struct som$RedBlackTree$3520dd22aa$Node * som$RedBlackTree$3520dd22aa$treeMinimum(struct som$RedBlackTree$3520dd22aa$Node * x);
struct som$RedBlackTree$3520dd22aa$Node * som$RedBlackTree$3520dd22aa$Node$successor(void* this);
struct som$RedBlackTree$3520dd22aa$RedBlackTree * som$RedBlackTree$3520dd22aa$create(int32_t (*func)(struct CD$Vector2D *, struct CD$Vector2D *));
uint8_t som$RedBlackTree$3520dd22aa$RedBlackTree$put(void* this, struct CD$Vector2D * key, uint8_t * value);
uint8_t som$RedBlackTree$3520dd22aa$RedBlackTree$putChecked(void* this, struct CD$Vector2D * key, uint8_t * value, uint8_t * newEntry);
uint8_t som$RedBlackTree$3520dd22aa$RedBlackTree$remove(void* this, struct CD$Vector2D * key);
uint8_t som$RedBlackTree$3520dd22aa$RedBlackTree$get(void* this, struct CD$Vector2D * key);
void som$RedBlackTree$3520dd22aa$RedBlackTree$forEach(void* this, struct som$Interfaces$863d2c4dbf$ForEachInterface * fn);
struct som$RedBlackTree$3520dd22aa$Node * som$RedBlackTree$3520dd22aa$RedBlackTree$findNode(void* this, struct CD$Vector2D * key);
void som$RedBlackTree$3520dd22aa$RedBlackTree$treeInsert(void* this, struct CD$Vector2D * key, uint8_t * value, struct som$RedBlackTree$3520dd22aa$InsertResult * res);
void som$RedBlackTree$3520dd22aa$RedBlackTree$leftRotate(void* this, struct som$RedBlackTree$3520dd22aa$Node * x);
void som$RedBlackTree$3520dd22aa$RedBlackTree$rightRotate(void* this, struct som$RedBlackTree$3520dd22aa$Node * y);
void som$RedBlackTree$3520dd22aa$RedBlackTree$removeFixup(void* this, struct som$RedBlackTree$3520dd22aa$Node * x, struct som$RedBlackTree$3520dd22aa$Node * xParent);
struct som$RedBlackTree$3520dd22aa$InsertResult$Class$ {
    struct som$RedBlackTree$3520dd22aa$InsertResult$Class$* super$;
};
extern struct som$RedBlackTree$3520dd22aa$InsertResult$Class$ som$RedBlackTree$3520dd22aa$InsertResult$class$;

struct som$RedBlackTree$3520dd22aa$Entry$Class$ {
    struct som$RedBlackTree$3520dd22aa$Entry$Class$* super$;
};
extern struct som$RedBlackTree$3520dd22aa$Entry$Class$ som$RedBlackTree$3520dd22aa$Entry$class$;

struct som$RedBlackTree$3520dd22aa$Node$Class$ {
    struct som$RedBlackTree$3520dd22aa$Node$Class$* super$;
    struct som$RedBlackTree$3520dd22aa$Node * (*successor)(void* this);
};
extern struct som$RedBlackTree$3520dd22aa$Node$Class$ som$RedBlackTree$3520dd22aa$Node$class$;

struct som$RedBlackTree$3520dd22aa$RedBlackTree$Class$ {
    struct som$RedBlackTree$3520dd22aa$RedBlackTree$Class$* super$;
    uint8_t (*put)(void* this, struct CD$Vector2D * key, uint8_t * value);
    uint8_t (*putChecked)(void* this, struct CD$Vector2D * key, uint8_t * value, uint8_t * newEntry);
    uint8_t (*remove)(void* this, struct CD$Vector2D * key);
    uint8_t (*get)(void* this, struct CD$Vector2D * key);
    void (*forEach)(void* this, struct som$Interfaces$863d2c4dbf$ForEachInterface * fn);
    struct som$RedBlackTree$3520dd22aa$Node * (*findNode)(void* this, struct CD$Vector2D * key);
    void (*treeInsert)(void* this, struct CD$Vector2D * key, uint8_t * value, struct som$RedBlackTree$3520dd22aa$InsertResult * res);
    void (*leftRotate)(void* this, struct som$RedBlackTree$3520dd22aa$Node * x);
    void (*rightRotate)(void* this, struct som$RedBlackTree$3520dd22aa$Node * y);
    void (*removeFixup)(void* this, struct som$RedBlackTree$3520dd22aa$Node * x, struct som$RedBlackTree$3520dd22aa$Node * xParent);
};
extern struct som$RedBlackTree$3520dd22aa$RedBlackTree$Class$ som$RedBlackTree$3520dd22aa$RedBlackTree$class$;

extern void som$RedBlackTree$3520dd22aa$init$(void);
extern OBX$Cmd som$RedBlackTree$3520dd22aa$cmd$(const char* name);
#endif
