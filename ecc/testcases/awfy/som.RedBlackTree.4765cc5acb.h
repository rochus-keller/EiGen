#ifndef _SOM$REDBLACKTREE$4765CC5ACB_
#define _SOM$REDBLACKTREE$4765CC5ACB_

// Generated by Oberon+ IDE (Mono) 0.9.106 on 2024-07-13T01:26:30

#include "OBX.Runtime.h"
#include "som.Interfaces.53de0d3f29.h"

// Declaration of module som.RedBlackTree(INT32,Tester.String)

struct som$RedBlackTree$4765cc5acb$Entry$Class$;
struct som$RedBlackTree$4765cc5acb$Entry;
struct som$RedBlackTree$4765cc5acb$InsertResult$Class$;
struct som$RedBlackTree$4765cc5acb$InsertResult;
struct som$RedBlackTree$4765cc5acb$Node$Class$;
struct som$RedBlackTree$4765cc5acb$Node;
struct som$RedBlackTree$4765cc5acb$RedBlackTree$Class$;
struct som$RedBlackTree$4765cc5acb$RedBlackTree;
struct som$RedBlackTree$4765cc5acb$Entry {
    struct som$RedBlackTree$4765cc5acb$Entry$Class$* class$;
    int32_t key;
    char value[32];
};

extern void som$RedBlackTree$4765cc5acb$Entry$init$(struct som$RedBlackTree$4765cc5acb$Entry*);
struct som$RedBlackTree$4765cc5acb$InsertResult {
    struct som$RedBlackTree$4765cc5acb$InsertResult$Class$* class$;
    uint8_t isNewEntry;
    struct som$RedBlackTree$4765cc5acb$Node * newNode;
    char oldValue[32];
};

extern void som$RedBlackTree$4765cc5acb$InsertResult$init$(struct som$RedBlackTree$4765cc5acb$InsertResult*);
struct som$RedBlackTree$4765cc5acb$Node {
    struct som$RedBlackTree$4765cc5acb$Node$Class$* class$;
    int32_t key;
    char value[32];
    struct som$RedBlackTree$4765cc5acb$Node * left;
    struct som$RedBlackTree$4765cc5acb$Node * right;
    struct som$RedBlackTree$4765cc5acb$Node * parent;
    int color;
};

extern void som$RedBlackTree$4765cc5acb$Node$init$(struct som$RedBlackTree$4765cc5acb$Node*);
struct som$RedBlackTree$4765cc5acb$RedBlackTree {
    struct som$RedBlackTree$4765cc5acb$RedBlackTree$Class$* class$;
    struct som$RedBlackTree$4765cc5acb$Node * root;
    int32_t (*compare)(int32_t *, int32_t *);
};

extern void som$RedBlackTree$4765cc5acb$RedBlackTree$init$(struct som$RedBlackTree$4765cc5acb$RedBlackTree*);
struct som$RedBlackTree$4765cc5acb$Node * som$RedBlackTree$4765cc5acb$createNode(int32_t * key, struct OBX$Array$1 value);
struct som$RedBlackTree$4765cc5acb$Node * som$RedBlackTree$4765cc5acb$treeMinimum(struct som$RedBlackTree$4765cc5acb$Node * x);
struct som$RedBlackTree$4765cc5acb$Node * som$RedBlackTree$4765cc5acb$Node$successor(void* this);
struct som$RedBlackTree$4765cc5acb$RedBlackTree * som$RedBlackTree$4765cc5acb$create(int32_t (*func)(int32_t *, int32_t *));
struct OBX$Array$1 som$RedBlackTree$4765cc5acb$RedBlackTree$put(void* this, int32_t * key, struct OBX$Array$1 value);
struct OBX$Array$1 som$RedBlackTree$4765cc5acb$RedBlackTree$putChecked(void* this, int32_t * key, struct OBX$Array$1 value, uint8_t * newEntry);
struct OBX$Array$1 som$RedBlackTree$4765cc5acb$RedBlackTree$remove(void* this, int32_t * key);
struct OBX$Array$1 som$RedBlackTree$4765cc5acb$RedBlackTree$get(void* this, int32_t * key);
void som$RedBlackTree$4765cc5acb$RedBlackTree$forEach(void* this, struct som$Interfaces$53de0d3f29$ForEachInterface * fn);
struct som$RedBlackTree$4765cc5acb$Node * som$RedBlackTree$4765cc5acb$RedBlackTree$findNode(void* this, int32_t * key);
void som$RedBlackTree$4765cc5acb$RedBlackTree$treeInsert(void* this, int32_t * key, struct OBX$Array$1 value, struct som$RedBlackTree$4765cc5acb$InsertResult * res);
void som$RedBlackTree$4765cc5acb$RedBlackTree$leftRotate(void* this, struct som$RedBlackTree$4765cc5acb$Node * x);
void som$RedBlackTree$4765cc5acb$RedBlackTree$rightRotate(void* this, struct som$RedBlackTree$4765cc5acb$Node * y);
void som$RedBlackTree$4765cc5acb$RedBlackTree$removeFixup(void* this, struct som$RedBlackTree$4765cc5acb$Node * x, struct som$RedBlackTree$4765cc5acb$Node * xParent);
struct som$RedBlackTree$4765cc5acb$Entry$Class$ {
    struct som$RedBlackTree$4765cc5acb$Entry$Class$* super$;
};
extern struct som$RedBlackTree$4765cc5acb$Entry$Class$ som$RedBlackTree$4765cc5acb$Entry$class$;

struct som$RedBlackTree$4765cc5acb$InsertResult$Class$ {
    struct som$RedBlackTree$4765cc5acb$InsertResult$Class$* super$;
};
extern struct som$RedBlackTree$4765cc5acb$InsertResult$Class$ som$RedBlackTree$4765cc5acb$InsertResult$class$;

struct som$RedBlackTree$4765cc5acb$Node$Class$ {
    struct som$RedBlackTree$4765cc5acb$Node$Class$* super$;
    struct som$RedBlackTree$4765cc5acb$Node * (*successor)(void* this);
};
extern struct som$RedBlackTree$4765cc5acb$Node$Class$ som$RedBlackTree$4765cc5acb$Node$class$;

struct som$RedBlackTree$4765cc5acb$RedBlackTree$Class$ {
    struct som$RedBlackTree$4765cc5acb$RedBlackTree$Class$* super$;
    struct OBX$Array$1 (*put)(void* this, int32_t * key, struct OBX$Array$1 value);
    struct OBX$Array$1 (*putChecked)(void* this, int32_t * key, struct OBX$Array$1 value, uint8_t * newEntry);
    struct OBX$Array$1 (*remove)(void* this, int32_t * key);
    struct OBX$Array$1 (*get)(void* this, int32_t * key);
    void (*forEach)(void* this, struct som$Interfaces$53de0d3f29$ForEachInterface * fn);
    struct som$RedBlackTree$4765cc5acb$Node * (*findNode)(void* this, int32_t * key);
    void (*treeInsert)(void* this, int32_t * key, struct OBX$Array$1 value, struct som$RedBlackTree$4765cc5acb$InsertResult * res);
    void (*leftRotate)(void* this, struct som$RedBlackTree$4765cc5acb$Node * x);
    void (*rightRotate)(void* this, struct som$RedBlackTree$4765cc5acb$Node * y);
    void (*removeFixup)(void* this, struct som$RedBlackTree$4765cc5acb$Node * x, struct som$RedBlackTree$4765cc5acb$Node * xParent);
};
extern struct som$RedBlackTree$4765cc5acb$RedBlackTree$Class$ som$RedBlackTree$4765cc5acb$RedBlackTree$class$;

extern void som$RedBlackTree$4765cc5acb$init$(void);
extern OBX$Cmd som$RedBlackTree$4765cc5acb$cmd$(const char* name);
#endif
