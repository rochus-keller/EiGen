#ifndef _SOM$VECTOR$E873043A5E_
#define _SOM$VECTOR$E873043A5E_

// Generated by Oberon+ IDE (Mono) 0.9.106 on 2024-07-13T01:26:30

#include "OBX.Runtime.h"
#include "som.Interfaces.e873043a5e.h"

// Declaration of module som.Vector(Tester.String)

struct som$Vector$e873043a5e$Vector$Class$;
struct som$Vector$e873043a5e$Vector;
struct som$Vector$e873043a5e$Vector {
    struct som$Vector$e873043a5e$Vector$Class$* class$;
    struct OBX$Array$2 storage;
    int32_t firstIdx;
    int32_t lastIdx;
};

extern void som$Vector$e873043a5e$Vector$init$(struct som$Vector$e873043a5e$Vector*);
struct som$Vector$e873043a5e$Vector * som$Vector$e873043a5e$createWithSize(int32_t siz);
struct som$Vector$e873043a5e$Vector * som$Vector$e873043a5e$create();
struct som$Vector$e873043a5e$Vector * som$Vector$e873043a5e$createWithElement(struct OBX$Array$1 elem);
struct OBX$Array$1 som$Vector$e873043a5e$Vector$at(void* this, int32_t idx);
void som$Vector$e873043a5e$Vector$resize(void* this, int32_t newLength);
void som$Vector$e873043a5e$Vector$atPut(void* this, int32_t idx, struct OBX$Array$1 elem);
void som$Vector$e873043a5e$Vector$append(void* this, struct OBX$Array$1 elem);
uint8_t som$Vector$e873043a5e$Vector$isEmpty(void* this);
struct OBX$Array$1 som$Vector$e873043a5e$Vector$first(void* this);
struct OBX$Array$1 som$Vector$e873043a5e$Vector$removeFirst(void* this);
void som$Vector$e873043a5e$Vector$removeAll(void* this);
int32_t som$Vector$e873043a5e$Vector$getSize(void* this);
int32_t som$Vector$e873043a5e$Vector$capacity(void* this);
void som$Vector$e873043a5e$Vector$forEach(void* this, struct som$Interfaces$e873043a5e$ForEachInterface * fn);
uint8_t som$Vector$e873043a5e$Vector$hasSome(void* this, struct som$Interfaces$e873043a5e$TestInterface * fn);
uint8_t som$Vector$e873043a5e$Vector$getOne(void* this, struct som$Interfaces$e873043a5e$TestInterface * fn, struct OBX$Array$1 out);
uint8_t som$Vector$e873043a5e$Vector$remove(void* this, struct OBX$Array$1 obj, uint8_t (*eq)(struct OBX$Array$1, struct OBX$Array$1));
void som$Vector$e873043a5e$Vector$sort(void* this, struct som$Interfaces$e873043a5e$Comparator * c);
void som$Vector$e873043a5e$Vector$sortImp(void* this, int32_t i, int32_t j, struct som$Interfaces$e873043a5e$Comparator * c);
void som$Vector$e873043a5e$swap(struct OBX$Array$2 storage2, int32_t i, int32_t j);
struct som$Vector$e873043a5e$Vector$Class$ {
    struct som$Vector$e873043a5e$Vector$Class$* super$;
    struct OBX$Array$1 (*at)(void* this, int32_t idx);
    void (*resize)(void* this, int32_t newLength);
    void (*atPut)(void* this, int32_t idx, struct OBX$Array$1 elem);
    void (*append)(void* this, struct OBX$Array$1 elem);
    uint8_t (*isEmpty)(void* this);
    struct OBX$Array$1 (*first)(void* this);
    struct OBX$Array$1 (*removeFirst)(void* this);
    void (*removeAll)(void* this);
    int32_t (*getSize)(void* this);
    int32_t (*capacity)(void* this);
    void (*forEach)(void* this, struct som$Interfaces$e873043a5e$ForEachInterface * fn);
    uint8_t (*hasSome)(void* this, struct som$Interfaces$e873043a5e$TestInterface * fn);
    uint8_t (*getOne)(void* this, struct som$Interfaces$e873043a5e$TestInterface * fn, struct OBX$Array$1 out);
    uint8_t (*remove)(void* this, struct OBX$Array$1 obj, uint8_t (*eq)(struct OBX$Array$1, struct OBX$Array$1));
    void (*sort)(void* this, struct som$Interfaces$e873043a5e$Comparator * c);
    void (*sortImp)(void* this, int32_t i, int32_t j, struct som$Interfaces$e873043a5e$Comparator * c);
};
extern struct som$Vector$e873043a5e$Vector$Class$ som$Vector$e873043a5e$Vector$class$;

extern void som$Vector$e873043a5e$init$(void);
extern OBX$Cmd som$Vector$e873043a5e$cmd$(const char* name);
#endif
