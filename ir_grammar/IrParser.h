#ifndef __IR_PARSER__
#define __IR_PARSER__
// This file was automatically generated by EbnfStudio; don't modify it!

#include <IrSynTree.h>

namespace Ir {

	class Scanner {
	public:
		virtual Token next() = 0;
		virtual Token peek(int offset) = 0;
	};

	class Parser {
	public:
		Parser(Scanner* s):scanner(s) {}
		void RunParser();
		SynTree root;
		struct Error {
		    QString msg;
		    int row, col;
		    QString path;
		    Error( const QString& m, int r, int c, const QString& p):msg(m),row(r),col(c),path(p){}
		};
		QList<Error> errors;
	protected:
		void Program(SynTree*);
		void Section(SynTree*);
		void code_section(SynTree*);
		void code(SynTree*);
		void init_code_section(SynTree*);
		void data_section(SynTree*);
		void init_data_section(SynTree*);
		void const_section(SynTree*);
		void type_section(SynTree*);
		void data_management(SynTree*);
		void arithmetic(SynTree*);
		void bit_manipulation(SynTree*);
		void function_call(SynTree*);
		void branching(SynTree*);
		void special(SynTree*);
		void loc(SynTree*);
		void alias(SynTree*);
		void req(SynTree*);
		void trap(SynTree*);
		void break_decl(SynTree*);
		void Offset(SynTree*);
		void Size(SynTree*);
		void type(SynTree*);
		void typeref(SynTree*);
		void rec_decl(SynTree*);
		void field_decl(SynTree*);
		void field(SynTree*);
		void array_decl(SynTree*);
		void ptr_decl(SynTree*);
		void ref_decl(SynTree*);
		void enum_decl(SynTree*);
		void enum_elem(SynTree*);
		void value(SynTree*);
		void func_decl(SynTree*);
		void basic_type(SynTree*);
		void data_decl(SynTree*);
		void def(SynTree*);
		void res(SynTree*);
		void sym_decl(SynTree*);
		void register_(SynTree*);
		void immediate_op(SynTree*);
		void register_op(SynTree*);
		void address_op(SynTree*);
		void memory_op(SynTree*);
		void ImmAdr(SynTree*);
		void RegMem(SynTree*);
		void ImmRegMem(SynTree*);
		void ImmRegAdrMem(SynTree*);
		void Pointer(SynTree*);
		void Function(SynTree*);
		void Register(SynTree*);
		void number(SynTree*);
		void unsigned_int(SynTree*);
	protected:
		Token cur;
		Token la;
		Scanner* scanner;
		void next();
		Token peek(int off);
		void invalid(const char* what);
		bool expect(int tt, bool pkw, const char* where);
		void addTerminal(SynTree* st);
	};
}
#endif // include
