// This file was automatically generated by EbnfStudio; don't modify it!
#include "IrSynTree.h"
using namespace Ir;

SynTree::SynTree(quint16 r, const Token& t ):d_tok(r){
	d_tok.d_lineNr = t.d_lineNr;
	d_tok.d_colNr = t.d_colNr;
	d_tok.d_sourcePath = t.d_sourcePath;
}

const char* SynTree::rToStr( quint16 r ) {
	switch(r) {
		case R_Function: return "Function";
		case R_ImmAdr: return "ImmAdr";
		case R_ImmRegAdrMem: return "ImmRegAdrMem";
		case R_ImmRegMem: return "ImmRegMem";
		case R_Offset: return "Offset";
		case R_Pointer: return "Pointer";
		case R_Program: return "Program";
		case R_RegMem: return "RegMem";
		case R_Register: return "Register";
		case R_Section: return "Section";
		case R_Size: return "Size";
		case R_address_op: return "address_op";
		case R_alias: return "alias";
		case R_arithmetic: return "arithmetic";
		case R_array_decl: return "array_decl";
		case R_basic_type: return "basic_type";
		case R_bit_manipulation: return "bit_manipulation";
		case R_branching: return "branching";
		case R_break_decl: return "break_decl";
		case R_code: return "code";
		case R_code_section: return "code_section";
		case R_comment_: return "comment";
		case R_const_section: return "const_section";
		case R_data_decl: return "data_decl";
		case R_data_management: return "data_management";
		case R_data_section: return "data_section";
		case R_def: return "def";
		case R_enum_decl: return "enum_decl";
		case R_enum_elem: return "enum_elem";
		case R_field: return "field";
		case R_field_decl: return "field_decl";
		case R_func_decl: return "func_decl";
		case R_function_call: return "function_call";
		case R_immediate_op: return "immediate_op";
		case R_init_code_section: return "init_code_section";
		case R_init_data_section: return "init_data_section";
		case R_loc: return "loc";
		case R_memory_op: return "memory_op";
		case R_number: return "number";
		case R_ptr_decl: return "ptr_decl";
		case R_rec_decl: return "rec_decl";
		case R_ref_decl: return "ref_decl";
		case R_register_: return "register_";
		case R_register_op: return "register_op";
		case R_req: return "req";
		case R_res: return "res";
		case R_special: return "special";
		case R_sym_decl: return "sym_decl";
		case R_trap: return "trap";
		case R_type: return "type";
		case R_type_section: return "type_section";
		case R_typeref: return "typeref";
		case R_unsigned_int: return "unsigned_int";
		case R_value: return "value";
	default: if(r<R_First) return tokenTypeName(r); else return "";
}
}
