#ifndef __IR_SYNTREE__
#define __IR_SYNTREE__
// This file was automatically generated by EbnfStudio; don't modify it!

#include <IrTokenType.h>
#include <IrToken.h>
#include <QList>

namespace Ir {

	struct SynTree {
		enum ParserRule {
			R_First = TT_Max + 1,
			R_Function,
			R_ImmAdr,
			R_ImmRegAdrMem,
			R_ImmRegMem,
			R_Offset,
			R_Pointer,
			R_Program,
			R_RegMem,
			R_Register,
			R_Section,
			R_Size,
			R_address_op,
			R_alias,
			R_arithmetic,
			R_array_decl,
			R_basic_type,
			R_bit_manipulation,
			R_branching,
			R_break_decl,
			R_code,
			R_code_section,
			R_comment_,
			R_const_section,
			R_data_decl,
			R_data_management,
			R_data_section,
			R_def,
			R_enum_decl,
			R_enum_elem,
			R_field,
			R_field_decl,
			R_func_decl,
			R_function_call,
			R_immediate_op,
			R_init_code_section,
			R_init_data_section,
			R_loc,
			R_memory_op,
			R_number,
			R_ptr_decl,
			R_rec_decl,
			R_ref_decl,
			R_register_,
			R_register_op,
			R_req,
			R_res,
			R_special,
			R_sym_decl,
			R_trap,
			R_type,
			R_type_section,
			R_typeref,
			R_unsigned_int,
			R_value,
			R_Last
		};
		SynTree(quint16 r = Tok_Invalid, const Token& = Token() );
		SynTree(const Token& t ):d_tok(t){}
		~SynTree() { foreach(SynTree* n, d_children) delete n; }

		static const char* rToStr( quint16 r );

		Ir::Token d_tok;
		QList<SynTree*> d_children;
	};

}
#endif // __IR_SYNTREE__
