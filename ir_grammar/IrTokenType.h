#ifndef __IR_TOKENTYPE__
#define __IR_TOKENTYPE__
// This file was automatically generated by EbnfStudio; don't modify it!


#include <QByteArray>

namespace Ir {
	enum TokenType {
		Tok_Invalid = 0,

		TT_Literals,
		Tok_Plus,
		Tok_Comma,
		Tok_Minus,
		Tok_Semi,
		Tok_At,
		Tok_Lbrack,
		Tok_Rbrack,

		TT_Keywords,
		Tok_dlr_0,
		Tok_dlr_1,
		Tok_dlr_2,
		Tok_dlr_3,
		Tok_dlr_4,
		Tok_dlr_5,
		Tok_dlr_6,
		Tok_dlr_7,
		Tok_dlr_fp,
		Tok_dlr_lnk,
		Tok_dlr_res,
		Tok_dlr_sp,
		Tok_dot_alignment,
		Tok_dot_code,
		Tok_dot_const,
		Tok_dot_data,
		Tok_dot_duplicable,
		Tok_dot_initcode,
		Tok_dot_initdata,
		Tok_dot_replaceable,
		Tok_dot_required,
		Tok_dot_type,
		Tok_add,
		Tok_alias,
		Tok_and,
		Tok_array,
		Tok_br,
		Tok_break,
		Tok_breq,
		Tok_brge,
		Tok_brlt,
		Tok_brne,
		Tok_call,
		Tok_conv,
		Tok_copy,
		Tok_def,
		Tok_div,
		Tok_enter,
		Tok_enum,
		Tok_f4,
		Tok_f8,
		Tok_field,
		Tok_fill,
		Tok_fix,
		Tok_fun,
		Tok_func,
		Tok_jump,
		Tok_leave,
		Tok_loc,
		Tok_lsh,
		Tok_mod,
		Tok_mov,
		Tok_mul,
		Tok_neg,
		Tok_nop,
		Tok_not,
		Tok_or,
		Tok_pop,
		Tok_ptr,
		Tok_push,
		Tok_rec,
		Tok_ref,
		Tok_req,
		Tok_res,
		Tok_ret,
		Tok_rsh,
		Tok_s1,
		Tok_s2,
		Tok_s4,
		Tok_s8,
		Tok_sub,
		Tok_sym,
		Tok_trap,
		Tok_type,
		Tok_u1,
		Tok_u2,
		Tok_u4,
		Tok_u8,
		Tok_unfix,
		Tok_value,
		Tok_void,
		Tok_xor,

		TT_Specials,
		Tok_string,
		Tok_identifier,
		Tok_binary_integer,
		Tok_octal_integer,
		Tok_decimal_integer,
		Tok_hex_integer,
		Tok_real,
		Tok_Comment,
		Tok_Eof,

		TT_MaxToken,

		TT_Max
	};

	const char* tokenTypeString( int ); // Pretty with punctuation chars
	const char* tokenTypeName( int ); // Just the names without punctuation chars
	bool tokenTypeIsLiteral( int );
	bool tokenTypeIsKeyword( int );
	bool tokenTypeIsSpecial( int );
	TokenType tokenTypeFromString( const QByteArray& str, int* pos = 0 );
	TokenType tokenTypeFromString( const char* str, quint32 len, int* pos = 0 );
}
#endif // __IR_TOKENTYPE__
